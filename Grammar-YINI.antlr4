/*
	YINI grammar in ANTLR 4.
	Apache License, Version 2.0, January 2004, http://www.apache.org/licenses/
	Copyright 2024 Gothenburg, Marko K. SeppÃ¤nen (Sweden via Finland).
*/

grammar YINI;
options { caseInsensitive=false; }

yini
    : SHEBANG? NL* rule+ NL* TERMINAL_TOKEN NL* EOF
    ;


rule
    : section_head section_members
    ;

section_head
	: '#'+ IDENT NL+
	;

section_members
    : member+
    ;

member
    : IDENT '=' value NL+
    ;

value
    : STRING
    | NUMBER
    | BOOLEAN
    ;

NUMBER
    : INTEGER ('.' INTEGER?)? EXPONENT?
    | SIGN? '.' DIGIT+ EXPONENT?
    | SIGN? '0' (BIN_INTEGER | OCT_INTEGER | DUO_INTEGER | HEX_INTEGER)
    ;
    
// Note: 0 or higher than 1, no leading 0s allowed (for ex: `01`)
fragment DECIMAL_INTEGER
    : '0'
    | SIGN? [1-9] DIGIT*
    ;

fragment INTEGER         : DECIMAL_INTEGER;
fragment BIN_INTEGER     : ('b'|'B') BIN_DIGIT+;
fragment OCT_INTEGER     : ('o'|'O') OCT_DIGIT+ | '0' OCT_DIGIT+;
fragment DUO_INTEGER     : ('z'|'Z') DUO_DIGIT+;
fragment HEX_INTEGER     : ('x'|'X') HEX_DIGIT+;

//fragment FLOAT
//    : DECIMAL_INTEGER '.' DECIMAL_INTEGER;

fragment DIGIT
    : [0-9]
    ;

//fragment NON_ZERO_DIGIT
//   : [1-9]
//   ;

fragment BIN_DIGIT       : '0' | '1';
fragment OCT_DIGIT       : [0-7];
fragment DUO_DIGIT       : DIGIT | [xe] | [XE]; // x =10, e = 11
fragment HEX_DIGIT       : DIGIT | [a-f] | [A-F];

fragment FRACTION
    : '.' DIGIT+
    ;

fragment EXPONENT
    : ('e' | 'E') SIGN? DIGIT+
    ;
    
fragment SIGN
    : ('+' | '-')
    ;

BOOLEAN options { caseInsensitive=true; }
    : ('true'|'yes'|'on')
    | ('false'|'no'|'off')
    ;

SHEBANG
    : '#!' ~[\n\r]* NL
    ;

TERMINAL_TOKEN
	: '###'
	;

IDENT  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ;

STRING
    : '"' ( ESC_SEQ_BASE | ~('\\' | '"') )* '"'
    ;

// Note: Do not forget to include seq. for " or ' when matching for esq_seq
ESC_SEQ_BASE
    : '\\' [nrt/bf\\]	// TODO: add \u hex hex hex hex
    ;
    
MULTI_LINE_COMMENT
    : '/*' .*? '*/' -> skip
    ;

SINGLE_LINE_COMMENT
    : '//' .*? (NL | EOF) -> skip
    ;

WS: [ \t]+ -> skip;
NL: ('\r' '\n'? | '\n') /*-> channel(HIDDEN)*/ ;
